(define remove-applic-lambda-nil
	(letrec ((loop (lambda (exp) 
				(if (pair? exp)
					(if (equal? (car exp) 'applic)
						(if (equal? (caadr exp) 'lambda-simple)
							(if (and (equal? (caddr exp) '()) (equal? (cadadr exp) '()))   
								`( ,@(loop (car (cddadr exp))) ,@(map loop (cdr (cddadr exp))))
								`( applic ,`( ,(caadr exp) ,(cadadr exp) ,@(loop (cddadr exp)) ) ,(loop (caddr exp)))
							)
							`(applic ,(loop (cadr exp)) ,@(loop (cddr exp)))
						)
						(if (equal? (cdr exp) '())
							`( ,(loop (car exp)))
							`( ,(loop (car exp)) ,@(map loop (cdr exp)))	
						)
					)
					`( ,@exp ))
				)))
	(lambda (pexp) (loop pexp))
	)	
)

(define searchIfBound 
	(lambda (param body)
		(letrec ((loop (lambda (body)
						(ormap (lambda (bodyPart)
							(cond ((equal? bodyPart '()) #f)
								  ((nestedLambda? param bodyPart)
										 (loop (cddr bodyPart)))
								  ((pair? bodyPart)
									(if  (equal? (car bodyPart) 'var) 
										  (equal? (cadr bodyPart) param)				  
											(loop bodyPart)
								))
								(else #f)))
						body))))
	(loop body))
	)
)

(define nestedLambda? 
	(lambda (param exp)
		(if (pair? exp) 
			(if (equal? (car exp) 'lambda-simple) 
					(let ((paramList (cadr exp)))
						(not (ormap (lambda (item) (equal? item param)) paramList)))
					(if (equal? (car exp) 'lambda-opt)
						(let ((paramList (append (cadr exp) (list (caddr exp)))))
							(not (ormap (lambda (item) (equal? item param)) paramList)))
						#f)
			)
		#f)
	)
)

(define searchBoundLevel1 
	(lambda (param body)
		(if (equal? param '()) 
			#f 
			;(if (equal? (cdr body) '())
				;(searchIfBound param body) 
				(letrec ((loop (lambda (exp)
							(ormap (lambda (bodyPart)
									(if (pair? bodyPart)
										(if (or (equal? (car bodyPart) 'lambda-simple) (equal? (car bodyPart) 'lambda-opt))
											(if (nestedLambda? param bodyPart)
												(searchIfBound param bodyPart)
												#f
											)	
										 	(if (pair? (car bodyPart))
												(or (loop (car bodyPart)) (loop (cdr bodyPart)))
												(loop bodyPart))
										 )
									#f
								))
						exp))))
			(loop body))
		)		
	)
)

(define paramIsSet?
	(lambda (param body)
		(letrec ((loop (lambda (body) 
		(if (pair? body)
			(if (pair? (car body)) 
				(or (loop  (car body)) (loop  (cdr body)))
				(if (or (equal? (car body) 'lambda-simple) (equal? (car body) 'lambda-opt))
					(if (nestedLambda? param body)
						(loop  (cddr body))
						#f
					)
					(if (equal? (car body) 'set)
						(if (equal? (cadadr body) param)
							(equal? (cadadr body) param)
							(loop (cddr body)))
						(ormap (lambda (bodyPart) (loop bodyPart) ) body)
					))
			)
		#f)	)))
	(loop body))
	)
)
		

(define searchSet 
	(lambda (param body)
		(if (equal? param '()) 
			#f
		 (paramIsSet? param body)
		)
	)
)

(define paramHasGet?
	(lambda (param body)
		(letrec ((loop (lambda (body) 
					(if (pair? body)
						(if (or (equal? (car body) 'lambda-simple) (equal? (car body) 'lambda-opt))
							(if (nestedLambda? param body)
								(searchGet param (cddr body))
								#f
							)
						(if (equal? (car body) 'set)
							(searchGet param (cddr body))
							(if (equal? (car body) 'var)
								(equal? (cadr body) param)
								(if (pair? (car body)) 
									(or (searchGet param (car body)) (searchGet param (cdr body)))
									#f)
								)))
						#f))))
				(loop body))
	)
)

(define searchGet 
	(lambda (param body)
		(if (equal? param '()) 
			#f 
			(letrec ((loop (lambda (body) 
						(if (pair? body) 
							(if (equal? (car body) 'set)
								(paramHasGet? param body)
								(if (and (or (equal? (car body) 'lambda-simple) (equal? (car body) 'lambda-opt)) (not (nestedLambda? param body)))
									#f
									(or (paramHasGet? param body)
										(ormap (lambda (bodyPart)
												(loop bodyPart)) 
											body)
									)
								)
							)
						#f)
					)))
		(loop body))
		)
	)
)




(define printSet
	(lambda (paramLst)
		(map (lambda (param)
			`(set (var ,param) (box (var ,param))))
		paramLst)
	) 
)


(define printParamSet
	(lambda (paramLst lambdaBody)
		(letrec ((needBox '())
				(printLoop (lambda (param restParam)
					(if (and (searchBoundLevel1 param lambdaBody) (searchSet param lambdaBody) (searchGet param lambdaBody))
						(set! needBox (append needBox (list param))))
					(if (not (equal? restParam '()))
						(printLoop (car restParam) (cdr restParam))))
				)
			)
		(printLoop (car paramLst) (cdr paramLst))
		`( ,@(printSet needBox))
		)
	)
)

(define getNewParamList 
	(lambda (paramLst boxLst lambdaBody)
		(letrec ((paramList '())
				(notBoxParam '())
				(createLoop (lambda (param restParam)
					(if (and (searchBoundLevel1 param lambdaBody) (searchSet param lambdaBody) (searchGet param lambdaBody))
						(set! paramList (append paramList (list param)))					
						(if (ormap (lambda (item) (equal? item param)) boxLst)
							(set! notBoxParam (append notBoxParam (list param)))
						))
					(if (not (equal? restParam '()))
						(createLoop (car restParam) (cdr restParam))))
				)
				(removeLoop (lambda (notBoxList prevParam prevBoxList)
								(if (not (ormap (lambda (notB) (equal? prevParam notB)) notBoxParam))
									(set! paramList (append paramList (list prevParam))))
								(if (not (equal? prevBoxList '()))
									(removeLoop notBoxParam (car prevBoxList) (cdr prevBoxList)))
							))
			)
		(createLoop (car paramLst) (cdr paramLst))
		(if (not (equal? boxLst '()))
			(removeLoop notBoxParam (car boxLst) (cdr boxLst)))
		paramList 
		)
	)
)

(define newBox? 
	(lambda (paramLst lambdaBody)	
		(ormap (lambda (param)
			 (and (searchBoundLevel1 param lambdaBody) (searchSet param lambdaBody) (searchGet param lambdaBody))) 
			paramLst)
	)
)


(define box-set ; create list of param, move down to the exp and chack the 3 condition every time we get lambda (opt/simple)
 (lambda (pexp)
 	(letrec ((removeSeq (lambda (lambdaBodyExp boxLst)
						(if (equal? (caar lambdaBodyExp) 'seq)
							(loop (cadar lambdaBodyExp) boxLst)
							(loop lambdaBodyExp boxLst))))
 			(loop (lambda (pexp boxLst)
	 		(if (pair? pexp)
	 			(cond ((equal? (car pexp) 'var) 
	 					(if (ormap (lambda (item) (equal? (cadr pexp) item)) boxLst )
	 						`(box-get ,pexp)
	 							`(,@pexp)))
	 				((equal? (car pexp) 'set)
	 					(if (ormap (lambda (item)  (equal? (cadadr pexp) item))boxLst) 
	 							`(box-set ,(cadr pexp) ,@(map (lambda (item) (loop item boxLst)) (cddr pexp)))
	 							`(set ,(cadr pexp) ,@(map (lambda (item) (loop item boxLst)) (cddr pexp)))))
	 				((equal? (car pexp) 'seq)
  					  		`(seq ,@(map (lambda (item) (loop item boxLst)) (cdr pexp))))
	 				((equal? (car pexp) 'lambda-simple)
	 					(let ((pList (cadr pexp))) 
	 					(if (equal? pList '())
	 						`( ,(car pexp) ,pList ,@(loop (cddr pexp) boxLst ))
	 						(let ((newParamList '() ))
	 							(set! newParamList (getNewParamList  pList boxLst (cddr pexp)))
	 								(if (newBox? pList (cddr pexp))
	 										`( ,(car pexp) ,pList ,`(seq  ,`( ,@(printParamSet pList (cddr pexp)) ,@(removeSeq (cddr pexp) newParamList))))
	 										`( ,(car pexp) ,pList ,@(map (lambda (item) (loop item boxLst)) (cddr pexp))))
	 								))))
	 				((equal? (car pexp) 'lambda-opt)
	 					(let ((pList (cadr pexp))
	 							(restArgs (caddr pexp)))
	 						(let ((lstParams (append  pList (list restArgs) '()))) 
		 						(if (equal? lstParams '())
									`( ,(car pexp) ,pList ,restArgs ,@(loop (cdddr pexp) boxLst))
		 							(let ((newParamList '() ))
			 							(set! newParamList (getNewParamList  lstParams boxLst (cddr pexp)))
			 								(if (newBox? lstParams (cddr pexp))
			 										`( ,(car pexp) ,pList ,restArgs ,`(seq  ,`( ,@(printParamSet lstParams (cdddr pexp)) ,@(removeSeq (cdddr pexp) newParamList))))
			 										`( ,(car pexp) ,pList ,restArgs ,@(map (lambda (item) (loop item boxLst)) (cdddr pexp))))
			 								)))))
	 				((not (pair? (car pexp)))
	 					`( ,(car pexp) ,@(map (lambda (pp) (loop pp boxLst)) (cdr pexp))))
	 				(else   (map (lambda (pe) (loop pe boxLst)) pexp))

	 			)
	 		`(,@pexp) )		
 		)))
 	(if (and (pair? pexp) (pair? (car pexp)))
 		(map (lambda (pe) (loop pe '())) pexp)
 		(loop pexp '()))
 	)
 )
)


(define numberingParamList   
	(lambda (paramList)  
		(letrec ((numberizeList (lambda (count)
		                            (lambda (lst)
		                            	(if (equal? lst '())
		                            		'()
			                              	(if (not (null? (cdr lst)))
			                                  (list (list (car lst) count)
			                                    ((numberizeList (+ count 1)) (cdr lst)))
			                                (list (car lst) count))
			                          )))))
		    ((numberizeList 0) paramList))
	)
)

(define findPvar 
	(lambda (numberedParam exp)
		(letrec ((loop 
						(lambda (lst)
							(if (pair? lst)
								(if (pair? (car lst))
									(if (equal? (caar lst) exp)
										`(pvar ,exp ,(cadar lst))
										(loop (cadr lst)))
									(if (equal? (car lst) exp)
										`(pvar ,exp ,(cadr lst))
										'())
								)
							'())

						)))
		(loop numberedParam))
	)
)

(define findBvarSpecific
	(lambda (lst major exp)
				(letrec ((loop 
						(lambda (lst)
							(if (equal? lst '())
								'()
								(if (pair? (car lst))
									(if (equal? (caar lst) exp)
										`(bvar ,exp ,major ,(cadar lst))
										(loop (cadr lst)))
									(if (equal? (car lst) exp)
										`(bvar ,exp ,major ,(cadr lst))
										'())
								)
							)

						)))
		(loop lst))
	)
)

(define findBvar 
	(lambda (boundLst exp)
		(letrec ((loop (lambda (bLst counter)
								(if (equal? bLst '())
									'()
									(if (equal? (findBvarSpecific (car bLst) counter exp) '())
										(loop (cadr bLst) (+ counter 1))
										(findBvarSpecific (car bLst) counter exp)
									)
								)

		)))
		(loop boundLst 0)   
		)
	)
)

(define lexLambdaBody 
	(lambda (lambdaBody numberedParam prevParam)
		(letrec ((loop (lambda (expr numberedParam prevParam) 
								(if (pair? expr)
									(if (pair? (car expr))
										`( ,(loop (car expr) numberedParam prevParam) 
										,@(map (lambda (expItem) (loop expItem numberedParam prevParam)) (cdr expr)))
										(if (equal? (car expr) 'var) 
											(if (not (equal? (findPvar numberedParam (cadr expr)) '()))
													(findPvar numberedParam (cadr expr))
													(if (not (equal? (findBvar prevParam (cadr expr)) '()))
														(findBvar prevParam (cadr expr))
														`(fvar ,(cadr expr))
													)
											)
			  								(if (equal? (car expr) 'lambda-simple) 
			  									(let ((numberedParamList (numberingParamList (cadr expr)))
			  										  (updatePrevParam (list numberedParam prevParam)))  
			  									   		`( ,(car expr) ,(cadr expr) ,@(loop (cddr expr) numberedParamList updatePrevParam)))
			  									(if (equal? (car expr) 'lambda-opt)
			  										(let ((numberedParamList (numberingParamList (append (cadr expr) (list (caddr expr)))))
			  											(updatePrevParam (list numberedParam prevParam)))  
			  									   		`(,(car expr) ,(cadr expr) ,(caddr expr) ,@(loop (cdddr expr) numberedParamList updatePrevParam)))
													`( ,@(map (lambda (expItem) (loop expItem numberedParam prevParam)) expr)))
			  								)
										)
									)

										`( ,@expr)
		  					)
		  				)))
  		(loop lambdaBody numberedParam prevParam)
  		)
	)
)

(define pe->lex-pe
  (lambda (pexp)
  	(letrec ((loop (lambda (exp) 
						(if (pair? exp)
							(if (equal? (car exp) 'var)
									`(fvar ,(cadr exp))
	  								(if (equal? (car exp) 'lambda-simple) 
	  									(let ((numberedParamList (numberingParamList (cadr exp))))  
	  									   		`( ,(car exp) ,(cadr exp) ,@(lexLambdaBody (cddr exp) numberedParamList '())))
	  									(if (equal? (car exp) 'lambda-opt)
	  										(let ((numberedParamList (numberingParamList (append (cadr exp) (list (caddr exp))))))
	  											`( ,(car exp) ,(cadr exp) ,(caddr exp) ,@(lexLambdaBody (cdddr exp) numberedParamList '())))
	  										(if (pair? (car exp)) 
	  											`( ,(loop (car exp)) ,@(map (lambda (expItem) (loop expItem)) (cdr exp)))
												`( ,(car exp) ,@(map (lambda (expItem) (loop expItem)) (cdr exp))))
										) 						
			  					)
			  				
	  						)
	  					`( ,@exp)
	  					))))
  	(loop pexp)
  )
 )
)
(define isOneFrom? 
	(lambda (formList exp)
		(if (pair? exp)
			(ormap (lambda (form) (equal? (car exp) form)) formList)
			#f
		)
	)
)

(define annotate-tc
  (letrec ((allExaptTheLast (lambda (lst tail)
							(letrec ((loop (lambda (lst)
										(if (equal? (cdr lst) '())
											`( ,(run (car lst) tail) ) 
											`( ,(run (car lst) #f ) ,@(loop (cdr lst)))
										))))
								(loop lst))))
  			(allOfThem (lambda (lst tail )
							(letrec ((loop (lambda (lst)
										(if (equal? (cdr lst) '())
											`( ,@(run (car lst) tail) ) 
											`( ,@(run (car lst) tail) ,@(loop (cdr lst)))
										))))
								(loop lst))))
  			(run (lambda (exp tail?) 
  				(cond ((isOneFrom?  '(const) exp) `( ,@exp) )   
  					  ((isOneFrom?  '(var fvar bvar pvar) exp) `(,@exp))
  					  ((isOneFrom?  '(if3) exp)
  					  		(operate (cdr exp) (lambda (test dit dif)
				  					  		`(if3 ,(run test #f)
				  					  				,(run dit tail?)
				  					  				,(run dif tail?)))
  					  		)
  					  )
  					  ((isOneFrom?  '(seq) exp)
  					  			`( seq ,(allExaptTheLast (cadr exp) tail?))
  					  )
  					  ((isOneFrom?  '(or) exp)
  					  		`( or ,(allExaptTheLast (cadr exp) tail?))
  					  )
  					  ((isOneFrom?  '(set box-set) exp)  
  					  		;`(,@exp)
  					  		`( ,(car exp) ,(cadr exp) ,(run (caddr exp) #f))
  					  )
  					  ((isOneFrom?  '(box box-get) exp)
  					  		`(,@exp)
  					  )
  					  ((isOneFrom?  '(define) exp)
  					  		`(define ,(cadr exp) ,(run (caddr exp) #f)) 
  					  )
  					  ((isOneFrom?  '(applic) exp)
  					  		(if (equal? tail? #f)
				  				`(applic ,(run (car (cdr exp)) #f) ,(allOfThem (cddr exp) #f)) ;,@(map (lambda (item) (run item #f seqOn?)) (cdr (cdr exp)))) 
				  				`(tc-applic  ,(run (car (cdr exp)) #f)  ,(allOfThem (cddr exp) #f));,@(map (lambda (item) (run item #f seqOn?)) (cdr (cdr exp)))) 
  					  		)  					  			
  					  )
  					  ((isOneFrom? '(lambda-simple) exp)
  					  		;(set! tail? #t)
  					  		`( ,(car exp) ,(cadr exp)  ,@(allExaptTheLast (cddr exp) #t))
  					  )
  					  ((isOneFrom?  '(lambda-opt) exp)
  					  		;(set! tail? #t)
  					  		`( ,(car exp) ,(cadr exp) ,(caddr exp)  ,@(allExaptTheLast (cdddr exp) #t))
  					  )
  					  ((pair? exp)
  					  	(if (pair? (car exp))
  					  	(if (equal? tail? #t)
  					  			`(tc-applic ,@(allExaptTheLast exp tail?))
  					  			`( ,@(allExaptTheLast exp tail?)))
  					  	`(,@exp)))

  					  (else `( ,@exp) ) 

  				))
  		))
  (lambda (pexp) (run pexp #f))
  )
)


(define operate 
	(lambda (exp func)
		(apply func exp)
	)
)
